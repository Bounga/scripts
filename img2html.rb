#!/usr/bin/ruby -w

=begin
  Created:          01/02/2005 - 11:02:31 (CET)
  Last Modified:    10/24/2008 - 19:49:30 (CET)
  
  Copyright (c) 2004-2008 by Nicolas "Bounga" Cavigneaux <nico@bounga.org>
  See COPYING for License detail.
 
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
=end

########################################################################################
# Create an xhtml page that shows all the pictures in a directory followed by its name #
########################################################################################

VER = "0.5"

require "getoptlong"
require "rexml/document"
include REXML

### Command Line Options ###

opts = GetoptLong.new(
						[ "--help", "-h", GetoptLong::NO_ARGUMENT ],
						[ "--title", "-t", GetoptLong::REQUIRED_ARGUMENT ],
						[ "--directory", "-d", GetoptLong::REQUIRED_ARGUMENT ],
						[ "--output", "-o", GetoptLong::REQUIRED_ARGUMENT ],
                        [ "--number", "-n", GetoptLong::REQUIRED_ARGUMENT ]
		)

### Parsing Command Line ###
file = "index.html"
dir = "."
title = "My Pictures"
number = 6

begin
	opts.each do |opt, arg|
		case opt
			when "--help" then
				puts "img2html #{VER}:"
				puts "\t-h, --help: show this help screen"
				puts "\t-t, --title: set the title of the webpage"
                puts "\t-n, --number: set the number of pictures on a line"
				puts "\t-d, --directory: set the directory to use for parsing files"
				puts "\t-o, --output: set the name of the output xhtml file"
			when "--title" then
				title = arg
			when "--directory" then
				dir = arg
			when "--output" then
				file = arg
            when "--number" then
                number = arg.to_i 
		end
	end
rescue GetoptLong::InvalidOption
	puts "Try #{File.basename($0)} -h"
	exit(1)
end

### Now doing the real work ###
basenames = Array.new   # basename of pictures we are working on
images = Array.new      # path of each picture

# Getting name of all pictures in the directory
Dir.foreach(dir) do |f|
    images << f if f =~ /\.jpg$|\.jpeg$|\.gif$|\.png$/
end
images.sort!

# Creating the xhtml page
doc = Document.new("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml11-strict.dtd\">")
doc << XMLDecl.new("1.0", "UTF-8")

# root
html = doc.add_element("html", {"xmlns"=>"http://www.w3.org/1999/xhtml", "xml:lang"=>"en", "lang"=>"en"})

# headers
head = html.add_element("head")

head.add_element("meta", {"http-equiv"=>"content-type", "content"=>"text/html; charset=UTF-8"})
head.add_element("meta", {"name"=>"AUTHOR", "content"=>"Pictures directory to HTML"})
head.add_element("meta", {"name"=>"DESCRIPTION", "content"=>title})

# CSS style
style = head.add_element("style", {"type"=>"text/css"})
style.text = <<EOS

/* Diplaying pictures centered in their boxes */
.pic {
    text-align: center;
}

/* Displaying picture names in colored boxes */
.name {
	background-color: #ffecce;
}

/* A centered title with a background color */
.title { 
	width: 100%;
	text-align: center;
	background-color: #ffecce;
	line-height: 2em;
}

/* A little footer */
.footer {
    font-style: italic;
    font-size: 1em;
}

.footer a {
    text-decoration: none;
    color: #fb6900;
}

.footer a:hover {
    text-decoration: underline;
}
EOS

# Page title
ptitle = head.add_element("title")
ptitle.text = title

# Page body
body = html.add_element("body")

# A title for our page
div_title = body.add_element("div", {"class"=>"title"})
h1 = div_title.add_element("h1")
h1.text = title

# We want to center the table
content = body.add_element("center")
table = content.add_element("table")
tr = table.add_element("tr")

# A footer to remember that the job was done by img2html
foot = body.add_element("div", {"class"=>"footer"})
p = foot.add_element("p")
p.text = "Generated by "
a = p.add_element("a", {"href"=>"http://www.bounga.org/"})
a.text = "img2html"
p.add(Text.new("."))


# Now doing the real job: fill the table with the pictures and their name
i = 0   # picture index in the current line
j = 0   # picture index in all pictures

images.each do |image|
    if i < number then # we want "number" pictures on a line
        bn = File.basename(image)
        td = tr.add_element("td", {"class"=>"pic"})
        td.add_element("img", {"src"=>bn})
        basenames.push(bn)
        i += 1
    else # we've got our 6 pictures, now we print their name
        tr = table.add_element("tr")
        basenames.each do |bn|
            td = tr.add_element("td", {"class"=>"name"})
            td.text = bn
        end
        basenames.clear # We don't need old picture names anymore
        
        # If we've got pictures left, we start a new row
        if j != images.length then
            tr = table.add_element("tr")
            i = 0
            redo
        end
    end
    j += 1
end

# There are picture names left to print
if not basenames.empty? then
    tr = table.add_element("tr")
    basenames.each do |bn|
        td = tr.add_element("td", {"class"=>"name"})
        td.text = bn
    end
    basenames.clear
end

# Finally, we write the xhtml code to the file
File.open(File.join(dir, file), "w") { |f| doc.write(f, 0, false, true)  }
